// 先写一个导出，源码中导出的模块，因为这个模块要在测试文件中进行引入
/* str表示输入，以空格把每个单词分隔开， */
// export default (str) => {
//   // 字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序
//   let arr = str.split(' ')
//   // 对数组进行遍历，然后每个元素进行反转
//   // 对数组里的单词进行反转,map()方法就是对arr进行遍历，并对每一项元素进行操作，并把操作后的结果返回
//   // item 就是数组中的每一项，在这里也就是每一个单词
//   let result = arr.map(item => {
//     /* 字符串没有直接反转的api,但是数组有,用item.split('')方法，这个方法表示按字符成立数组元素，
//     注意这里''没有空格，所以item.split('')就返回一个数组,reverse表示把数组的所有元素进行反转,反转结束后需要用join方法
//     变回字符串 */
//     return item.split('').reverse().join('')
//   })
//   // 把数组变成字符串,注意这里也要用空格连接起来
//   return result.join(' ')
// }

// 在面试中应该需要更优雅的代码
// 代码写的更加优雅,没有生成额外的变量
// export default (str) => {
//   // 1.字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序
//   // 2.对数组进行遍历，然后每个元素进行反转
//   return str.split(' ').map(item => {
//     return item.split('').reverse().join('')
//   }).join(' ')
// }

// 3.面试官会继续问，有没有其他的方法，用正则
// export default (str) => {
//   // 1.字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序
//   // 2.对数组进行遍历，然后每个元素进行反转
//   /* split允许正则，也允许常量，但是这两种是有区别的，查一下！ */
//   return str.split(/\s/g).map(item => {
//     return item.split('').reverse().join('')
//   }).join(' ')
// }

// 4.用match方法
export default (str) => {
  // 1.字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序
  // 2.对数组进行遍历，然后每个元素进行反转
  /* match也可以用作正则的识别，因为正则的匹配是从左到右进行的，这个规则意味从左到右一个一个识别出来[w']就是要识别
  单词的意思，[]代表可选项，w就是字符的意思，'就是Let's的，+表示要大于一个， */
  return str.match(/[\w']+/g).map(item => {
    return item.split('').reverse().join('')
  }).join(' ')
}
